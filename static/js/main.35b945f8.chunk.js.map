{"version":3,"sources":["passwordView.js","App.js","reportWebVitals.js","index.js"],"names":["PasswordView","useState","password","updatePassword","generatePasswordClicked","handleGeneratePasswordClick","sliderValue","updateValue","includeDigit","updateDigitChange","includeSymbol","updateSymbolChange","copyText","updateCopyText","useEffect","generatePassword","randomInt","min","max","Math","ceil","floor","random","alphabet","split","digits","symbols","newPassword","numberOfDigits","numberOfSymbols","i","push","length","j","k","array","shuffle","join","copyPassword","textToCopy","navigator","clipboard","writeText","then","handleKeyDown","e","code","document","title","addEventListener","removeEventListener","className","id","onClick","value","onChange","type","defaultChecked","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.35b945f8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Slider from \"react-rangeslider\";\n\nconst PasswordView = () => {\n  const [password, updatePassword] = useState(\"\");\n  const [generatePasswordClicked, handleGeneratePasswordClick] = useState(\n    false\n  );\n  const [sliderValue, updateValue] = useState(22);\n  const [includeDigit, updateDigitChange] = useState(true);\n  const [includeSymbol, updateSymbolChange] = useState(false);\n  const [copyText, updateCopyText] = useState(\n    \"Press the space bar to generate a new password.  Press enter to copy.\"\n  );\n\n  useEffect(() => generatePassword(), [\n    sliderValue,\n    includeDigit,\n    includeSymbol,\n  ]);\n\n  const handleChange = (value) => {\n    if (sliderValue !== value) {\n      updateValue(value);\n    }\n  };\n\n  const clipboardCopy = (textToCopy) => {\n    navigator.clipboard.writeText(textToCopy).then(function () {\n      updateCopyText(\"Copied!\");\n    });\n  };\n\n  const handleSymbolChange = () => {\n    updateSymbolChange(!includeSymbol);\n  };\n\n  const handleDigitChange = () => {\n    updateDigitChange(!includeDigit);\n  };\n\n  const shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n\n  const randomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n  };\n\n  const generatePassword = () => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\n      \"\"\n    );\n    const digits = \"0123456789\".split(\"\");\n    const symbols = \"!#$%&'()*+,./:;<=>?@[]^_`{|}~\".split(\"\");\n\n    let newPassword = [];\n    let numberOfDigits = 0;\n    let numberOfSymbols = 0;\n    if (includeDigit) {\n      numberOfDigits = randomInt(1, sliderValue / 3);\n    }\n    if (includeSymbol) {\n      numberOfSymbols = randomInt(1, sliderValue / 3);\n    }\n\n    for (let i = 0; i < numberOfDigits; i++) {\n      newPassword.push(digits[Math.floor(digits.length * Math.random())]);\n    }\n    for (let j = 0; j < numberOfSymbols; j++) {\n      newPassword.push(symbols[Math.floor(symbols.length * Math.random())]);\n    }\n    for (let k = 0; k < sliderValue - numberOfDigits - numberOfSymbols; k++) {\n      newPassword.push(alphabet[Math.floor(alphabet.length * Math.random())]);\n    }\n    shuffle(newPassword);\n    newPassword.join(\"\");\n    handleGeneratePasswordClick(true);\n    updatePassword(newPassword);\n  };\n\n  const copyPassword = () => {\n    clipboardCopy(password.join(\"\"));\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.code === \"Space\") {\n      generatePassword();\n      updateCopyText(\"Press enter to copy\");\n    }\n    if (e.code === \"Enter\") {\n      copyPassword();\n      updateCopyText(\"Copied!\");\n    }\n  };\n\n  useEffect(() => {\n    document.title = \"Password Generator\";\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [handleKeyDown]);\n\n  return (\n    <div className=\"App\">\n      <div id=\"notTheControlPanel\" onClick={() => copyPassword()}>\n        <div className=\"passwordView\">\n          {generatePasswordClicked ? password : null}\n        </div>\n      </div>\n      <div id=\"theControlPanel\">\n        <div id=\"copyText\">{copyText}</div>\n        <div className=\"value\">{sliderValue} Characters</div>\n        <Slider\n          min={10}\n          max={100}\n          value={sliderValue}\n          onChange={handleChange}\n        />\n        <div className=\"checkboxesContainer\">\n          <label className=\"container\">\n            Symbols\n            <input type=\"checkbox\" onChange={() => handleSymbolChange()} />\n            <span className=\"checkmark\"></span>\n          </label>\n          <label className=\"container\">\n            Numbers\n            <input\n              type=\"checkbox\"\n              defaultChecked=\"true\"\n              onChange={() => handleDigitChange()}\n            />\n            <span className=\"checkmark\"></span>\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordView;\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport PasswordView from \"./passwordView.js\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <PasswordView />\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}