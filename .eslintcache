[{"/Users/amara/Documents/RC/password-generator/src/index.js":"1","/Users/amara/Documents/RC/password-generator/src/App.js":"2","/Users/amara/Documents/RC/password-generator/src/reportWebVitals.js":"3"},{"size":500,"mtime":1611348713800,"results":"4","hashOfConfig":"5"},{"size":3223,"mtime":1611878287378,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1611348713804,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1scfl59",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/amara/Documents/RC/password-generator/src/index.js",[],["16","17"],"/Users/amara/Documents/RC/password-generator/src/App.js",["18"],"import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Slider from \"react-rangeslider\";\n\nconst PasswordView = () => {\n  const [password, updatePassword] = useState(\"\");\n  const [generatePasswordClicked, handleGeneratePasswordClick] = useState(\n    false\n  );\n  const [sliderValue, updateValue] = useState(10);\n  const [includeDigit, updateDigitChange] = useState(true);\n  const [includeSymbol, updateSymbolChange] = useState(true);\n  useEffect(() => generatePassword(), [\n    sliderValue,\n    includeDigit,\n    includeSymbol,\n  ]);\n\n  const handleChange = (value) => {\n    if (sliderValue !== value) {\n      updateValue(value);\n    }\n  };\n\n  const clipboardCopy = (textToCopy) => {\n    navigator.clipboard.writeText(textToCopy).then(\n      function () {\n        /* clipboard success message/action*/\n      },\n      function () {\n        /* clipboard failure message/action*/\n      }\n    );\n  };\n\n  const handleSymbolChange = () => {\n    updateSymbolChange(!includeSymbol);\n  };\n\n  const handleDigitChange = () => {\n    updateDigitChange(!includeDigit);\n  };\n\n  const generatePassword = () => {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\n      \"\"\n    );\n    const digits = \"0123456789\".split(\"\");\n    const symbols = \"!#$%&'()*+,-./:;<=>?@[]^_`{|}~\".split(\"\");\n    let passwordCharSet = [];\n    if (includeDigit && includeSymbol) {\n      passwordCharSet = alphabet.concat(digits.concat(symbols));\n    } else if (includeDigit) {\n      passwordCharSet = alphabet.concat(digits);\n    } else if (includeSymbol) {\n      passwordCharSet = alphabet.concat(symbols);\n    } else if (!includeDigit && !includeSymbol) {\n      passwordCharSet = alphabet;\n    }\n    let newPassword = [];\n    for (let i = 0; i < sliderValue; i++) {\n      newPassword.push(\n        passwordCharSet[Math.floor(passwordCharSet.length * Math.random())]\n      );\n      newPassword.join(\"\");\n    }\n    handleGeneratePasswordClick(true);\n    updatePassword(newPassword);\n  };\n\n  return (\n    <div>\n      <div className=\"rangeslider-horizontal\">\n        <Slider\n          min={10}\n          max={100}\n          value={sliderValue}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"value\">{sliderValue} Characters</div>\n      <button onClick={() => generatePassword(sliderValue)}>\n        Generate password\n      </button>\n      <button onClick={() => clipboardCopy(password.join(\"\"))}>\n        Copy to Clipboard\n      </button>\n      <div className=\"passwordView\">\n        {generatePasswordClicked ? password : null}\n      </div>\n      <form>\n        <label>\n          Include symbols\n          <input\n            type=\"checkbox\"\n            defaultChecked=\"true\"\n            onChange={() => handleSymbolChange()}\n          />\n        </label>\n        <label>\n          Include digits\n          <input\n            type=\"checkbox\"\n            defaultChecked=\"true\"\n            onChange={() => handleDigitChange()}\n          />\n        </label>\n      </form>\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Secure Password Generator</header>\n      <PasswordView />\n    </div>\n  );\n};\nexport default App;\n","/Users/amara/Documents/RC/password-generator/src/reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":13,"column":39,"nodeType":"25","endLine":17,"endColumn":4,"suggestions":"26"},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generatePassword'. Either include it or remove the dependency array.","ArrayExpression",["29"],"no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: [sliderValue, includeDigit, includeSymbol, generatePassword]",{"range":"32","text":"33"},[494,553],"[sliderValue, includeDigit, includeSymbol, generatePassword]"]